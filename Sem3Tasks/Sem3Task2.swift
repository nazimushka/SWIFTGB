/*2. Есть массив [-4, 5, 10, nil, 4, nil, 25, 0, nil, 16, 75, -20, -7, 15, 0, nil]. 
Необходимо создать новый массив, который будет состоять из элементов старого, 
но не должно быть nil, не должно быть 0 и 4, а также массив должен быть отсортирован по возрастанию.*/

var a: [Int?] = [-4, 5, 10, nil, 4, nil, 25, 0, nil, 16, 75, -20, -7, 15, 0, nil]


for (index, element) in a.enumerated() { // тут я значения nil и 4 приравнял к нулю, чтобы удобно было работать
    if element==nil {
        a[index] = 0
    } else if (element==4){
        a[index]=0
    }
} 

var b = a.filter {$0 != 0}  // тут удалил 0 через фильтр
var c = [Int](1...b.count) // создал новый целочисленный массив
for (index, element) in b.enumerated(){ // передал в этот массив с явным приведением опциональных значений к целочисленным
    c[index]=element!
}

var d = c.sorted{$0 < $1} // отсортировал по возрастанию
print(d)

// Вывод:  в Swift очень тяжело после C#, Java и phyton работать с опциональными значениями, поэтому буду исправлять костыли
